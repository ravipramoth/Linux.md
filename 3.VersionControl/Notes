# Git notes (updated: 2025-08-12)

## Quick setup (first time)
- Identity
  - git config --global user.name "Your Name"
  - git config --global user.email "you@example.com"
- Defaults
  - git config --global init.defaultBranch main
  - git config --global core.autocrlf true
  - git config --global pull.rebase false
- Helpful aliases
  - git config --global alias.lg "log --oneline --graph --decorate --all"
  - git config --global alias.st "status -sb"
- Verify: git config --list

## Create or clone
- git init
- git clone <repo-url>

## File lifecycle
- git status (or: git status -s)
- git add <file>  |  git add .
- git commit -m "message"
- git log --oneline --graph --decorate --all
- git show
- git diff
- git diff --staged
- git diff <A> <B> -- <path>

## Branches
- git branch
- git switch -c feature/x   (or: git checkout -b feature/x)
- git switch feature/x
- git branch -m new-name
- git branch -d old-branch  (or: -D to force)

## Merge
- git switch main
- git merge feature/x
- Keep merge commit: git merge --no-ff feature/x
Refer to Notes.md for the formatted Git cheat sheet.

# clean untracked files/dirs
git clean -fd

# recover using reflog (find lost commits/branches)
git reflog


# Bisect (find first bad commit)
# start a bisection session
git bisect start
git bisect bad                 # mark current as bad
git bisect good <good-sha>     # mark a known good commit
# Git checks out a midpoint → test your app →
#   if bad:  git bisect bad
#   if good: git bisect good
# repeat until Git prints the first bad commit
git bisect reset               # end session


# .gitignore tips (examples)
# Logs
logs/
*.log
!keep.me

# OS/editor
.DS_Store
Thumbs.db
.vscode/

# Dependencies
node_modules/
venv/

# Builds
dist/
build/


# Everyday workflow example
# create a branch, work, rebase on latest main, push PR
git switch -c feature/add-api
# edit files
git add .
git commit -m "feat: add API client"
git fetch origin
git rebase origin/main
git push -u origin feature/add-api
# after merge:
git switch main
git pull --ff-only
git branch -d feature/add-api


# Troubleshooting
# push rejected (non-fast-forward)
#   update local, reapply, push
git fetch origin
git rebase origin/main   # or: git pull --rebase
# resolve conflicts → continue → push

git switch -c rescue     # from detached HEAD to keep work

# restore a file from another branch
git restore -s origin/main -- path/to/file
