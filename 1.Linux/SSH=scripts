#!/bin/bash

# Define the path to the local script
LOCAL_SCRIPT="/path/to/your/local/script.sh"

# Define the remote servers
SERVER_1="ubuntu@3.93.192.22" #  apt package manager
SERVER_2="ec2-user@54.91.123.124" # yum package manager 

# Execute the script on the first server
echo "Running script on $SERVER_1..."
ssh "$SERVER_1" "bash -s" < "$LOCAL_SCRIPT" 1>>/dev/null

# Check if the previous command was successful
if [ $? -eq 0 ]; then
    echo "Script executed successfully on $SERVER_1."
else
    echo "Failed to execute script on $SERVER_1."
fi

# Execute the script on the second server
echo "Running script on $SERVER_2..."
ssh "$SERVER_2" "bash -s" < "$LOCAL_SCRIPT"

# Check if the previous command was successful
if [ $? -eq 0 ]; then
    echo "Script executed successfully on $SERVER_2."
else
    echo "Failed to execute script on $SERVER_2."
fi
-----------------------------------------------------

ssh ubuntu@54.221.91.184 "bash -s" < /path/to/your/local/script.sh
ssh ec2-user@54.91.123.124 "bash -s" < /root/1.sh


------------------------------------------------------
#!/bin/bash

# Update package manager
if [ -f /etc/system-release ]; then
    # Amazon Linux
    sudo yum update -y
    echo "Detected Amazon Linux."
    
    # Install curl
    sudo yum install -y curl
    echo "Installed curl on Amazon Linux."
    
elif [ -f /etc/lsb-release ]; then
    # Ubuntu
    sudo apt update -y
    echo "Detected Ubuntu."
    
    # Install curl
    sudo apt install -y curl
    echo "Installed curl on Ubuntu."
    
else
    echo "Unsupported operating system."
    exit 1
fi

echo "Script completed successfully." 

# Ansible is good for that --- > Package manager --- > yum or apt

---------------------------------------------------------
#!/bin/bash

# Directory to scan
DIR="/var/log"

# Days threshold
read -p "Enter the number of days: " DAYS
# Log file
LOG_FILE="/var/log/deleted_files_$(date +%F).log"

# Find files older than $DAYS days
OLD_FILES=$(find "$DIR" -type f -mtime +$DAYS)

# Check if any files are found
if [ -z "$OLD_FILES" ]; then
    echo "No files older than $DAYS days found in $DIR."
    exit 0
fi

# Print files that will be deleted
echo "The following files are older than $DAYS days and will be deleted:"
echo "$OLD_FILES"

# Ask user for confirmation
read -p "Do you want to delete these files? (yes/no): " answer

case "$answer" in #Yes YEs YES 
    [Yy][Ee][Ss])
        echo "Cleanup started at: $(date)" >> "$LOG_FILE"
        echo "$OLD_FILES" | while read -r file; do
            echo "Deleting: $file" | tee -a "$LOG_FILE"
            rm -f "$file"
        done
        echo "Cleanup completed at: $(date)" >> "$LOG_FILE"
        echo "Log saved to $LOG_FILE"
        ;;
    [Nn][Oo])
        echo "No files were deleted. Exiting."
        ;;
    *)
        echo "Invalid input. Please enter yes or no."
        ;;
esac

----------------------------------------------------------------------------------------------------- 

#!/bin/bash

# List of services to check
services=("jenkins" "docker" "httpd")

# Email address to send alerts to
mailTo="ravipramoth@gmail.com"

# Log file for keeping track of status
LOG_FILE="/var/log/service_check_$(date +%F).log"

# Function to check if service is running
check_service() {
    local service=$1
    systemctl is-active --quiet "$service"
    status=$?

    if [ $status -ne 0 ]; then
        echo "$(date '+%F %T') ALERT: $service is NOT running on $(hostname)" | tee -a "$LOG_FILE"
        echo "$service is NOT running on $(hostname)" | mailx -s "Service Alert: $service down" "$mailTo"
    else
        echo "$(date '+%F %T') OK: $service is running" | tee -a "$LOG_FILE"
    fi
}

# Loop through all services and check them
for service in "${services[@]}"; do
    check_service "$service"
done



# * * * * * /path/to/your/script.sh 
--------------------------------------------------------------------------------------------------------------------- 
Copy file to remote server using scp

scp /path/to/local/file username@remote_host:/path/to/remote/destination



rsync to copy files to remote server

rsync -avz /path/to/local/file username@remote_host:/path/to/remote/destination

-a: archive mode
-v: verbose
-z: compress data during transfer
-------------------------------------------------------------- 