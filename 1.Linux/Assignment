#! /bin/bash

# Ping google.com with 1 packet and check if it responds
ping -c 1 google.com > /root/output  2>&1

# Check the exit status of the ping command
if [ $? -eq 0 ]; then
  echo $?
  echo "Google.com is reachable"
 
else
  echo $? 
  echo "Google.com is not reachable"
fi 

using above script get input from user at runtime and check if the website is reachable or not
----------------------------------------------------
#! /bin/bash -- She bang line sha bang line---- recommended to have this in the first line of the script but not mandatory
# /bin/s

# Prompt the user for a file name
read -p "Enter the file name to check: " filename

# Check if the file exists
if [ -e "$filename" ]; then
  echo "The file $filename exists."
else
  echo "The file $filename does not exist."
fi

-e checks if the file exists.
-f checks if the file is a regular file.  normal file & link file
-d checks if the file is a directory.
-r checks if the file is readable. soft link file orginal file if deleted
-w checks if the file is writable.
-x checks if the file is executable.
-s checks if the file is not empty.

Try to create a script that checks if a file exists and if it is readable, writable, and executable. If the file does not exist, create it with some default content.

--------------------------------------------------------------------- 
Assingment: 3 

nginx 
docker 
httpd
mysql 
jenkins 

Write a case script for above service to start, stop, restart, and check the status of each service. 


--------------------------------------------------------------------------------------------------------------------------
Assingment : 4 
if service is inactive make that service active using systemctl command.

nginx 
docker 
httpd
mysql 
jenkins 

Try to use While loop to run the script 
-------------------------------------------------------------------------------

Assingment -5 

use below script to add the few tools and send email. rg ( git,httpd)

#!/bin/bash
COMMAND=/bin/command
CUT=/bin/cut
TR=/bin/tr
AWK=/bin/awk
ECHO=/bin/echo
CAT=/bin/cat
MAILX=/bin/mailx
TEE=/bin/tee
LOG_FILE=/root/log/senddevops.log
${ECHO} $(date '+%F') "Validating docker tool" | ${TEE} -a ${LOG_FILE}
if ${COMMAND} -v docker 1>/dev/null 2>&1 ; then 
        DOCKER=$(${COMMAND} -v docker)
        dockerVer=$(${DOCKER} --version | ${CUT} -d ' ' -f3 | ${TR} -d ',') 
        ${ECHO} $(date '+%F') "DOCKER Version is : ${dockerVer} " | ${TEE} -a ${LOG_FILE}
else
        dockerVer="Not Found"
fi
${ECHO} $(date '+%F') "Validating ansible tool" | ${TEE} -a ${LOG_FILE}
if ${COMMAND} -v ansible 1>/dev/null 2>&1 ; then 
        ANSIBLE=$(${COMMAND} -v ansible)
        ansibleVer=$(${ANSIBLE} --version | ${AWK} 'NR==1' | ${CUT}  -d ' ' -f3 | tr -d ']')
        ${ECHO} $(date '+%F') "ANSIBLE Version is : ${ansibleVer} " | ${TEE} -a ${LOG_FILE}
        # > >> ${LOG_FILE}
else 
        ansibleVer="Not Found"
fi 
${ECHO} $(date '+%F') "Validating java tool" >> ${LOG_FILE}
if ${COMMAND} -v java 1>/dev/null 2>&1 ; then
        JAVA=$(${COMMAND} -v java )
        javaVer=$(${JAVA} -version 2>&1 | ${AWK} 'NR==1' | ${CUT}  -d ' ' -f3 | ${TR} -d '"')
        ${ECHO} $(date '+%F') "JAVA Version is : ${javaVer} " >> ${LOG_FILE}
else 
        javaVer="Not Found"
fi 
${ECHO} $(date '+%F') "Validating nginx tool" >> ${LOG_FILE}
if ${COMMAND} -v nginx 1>/dev/null 2>&1 ; then
        NGINX=$( ${COMMAND} -v nginx)
        nginxVer=$(${NGINX} -version 2>&1| ${CUT}  -d '/' -f2) 
        ${ECHO} $(date '+%F') "NGINX Version is : ${nginxVer} " >> ${LOG_FILE}
else 
        nginxVer="Not Found"
fi 

${ECHO} "ToolName       VersionInfo"
${ECHO} "Docker         ${dockerVer}"
${ECHO} "ansible     ${ansibleVer}"
${ECHO} "java           ${javaVer}"
${ECHO} "nginx          ${nginxVer}"    
             

${CAT} << EOF | ${MAILX} -s "$(${ECHO} -e "DevOps Tools Info on $(hostname)\nContent-Type: text/html")" ravipramoth@gmail.com
<!DOCTYPE html>
<html>

<head>
    <title>
         Automation By Pramoth RAvi 
    </title>
</head>

<body>
    <h2>Please Find Below Table For DevOps Tools Versions </h1>
    <table border="1">
        <tr>
            <th>ToolName</th>
            <th>Version</th>
        </tr>
        <tr>
            <td>Docker</td>
            <td>${dockerVer}</td>
        </tr>
        <tr>
            <td>ansible</td>
            <td>${ansibleVer}</td>
        </tr>
        <tr>
            <td>java</td>
            <td>${javaVer}</td>
        </tr>
        <tr>
            <td>nginx</td>
            <td>${nginxVer}</td>
        </tr>
    </table>
</body>

EOF
----------------------------------------
Assingment - 6 

use below script to get input from user to check size or the older files to delete them. 

#!/bin/bash

# Update package manager
if [ -f /etc/system-release ]; then
    # Amazon Linux
    sudo yum update -y
    echo "Detected Amazon Linux."
    
    # Install curl
    sudo yum install -y curl
    echo "Installed curl on Amazon Linux."
    
elif [ -f /etc/lsb-release ]; then
    # Ubuntu
    sudo apt update -y
    echo "Detected Ubuntu."
    
    # Install curl
    sudo apt install -y curl
    echo "Installed curl on Ubuntu."
    
else
    echo "Unsupported operating system."
    exit 1
fi

echo "Script completed successfully."

---------------------------------------------------------
#!/bin/bash

# Directory to scan
DIR="/var/log"

case # Days threshold or file size 


# Days threshold
read -p "Enter the number of days: " DAYS
# Log file
LOG_FILE="/var/log/deleted_files_$(date +%F).log"

# Find files older than $DAYS days
OLD_FILES=$(find "$DIR" -type f -mtime +$DAYS)

# Check if any files are found
if [ -z "$OLD_FILES" ]; then
    echo "No files older than $DAYS days found in $DIR."
    exit 0
fi

# Print files that will be deleted
echo "The following files are older than $DAYS days and will be deleted:"
echo "$OLD_FILES"

# Ask user for confirmation
read -p "Do you want to delete these files? (yes/no): " answer

case "$answer" in #Yes YEs YES 
    [Yy][Ee][Ss])
        echo "Cleanup started at: $(date)" >> "$LOG_FILE"
        echo "$OLD_FILES" | while read -r file; do
            echo "Deleting: $file" | tee -a "$LOG_FILE"
            rm -f "$file"
        done
        echo "Cleanup completed at: $(date)" >> "$LOG_FILE"
        echo "Log saved to $LOG_FILE"
        ;;
    [Nn][Oo])
        echo "No files were deleted. Exiting."
        ;;
    *)
        echo "Invalid input. Please enter yes or no."
        ;;
esac

-------------------------------------------------------------

first get input from user to check size or the older files to delete them.
second any condtionl statement to check the size or the older files
you can notfiy via email | mailx -a /path/ 

------------------------------------------------------------------------------
