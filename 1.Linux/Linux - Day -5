File Permission  

- -> it is file or directory d-> Directory l --> link file 
rw- --> Owner of file 
r--  --- > group permission 
r-- -->  Other permission 

0==>  No Permission 
1==> Excute 
2==> write 
3 (2+1) ==> Execute + read 
4 ===> read 
5 (4+1) ==> read + excute 
6 (4+2) ===> read + write 
7 == Full Permission  ( R+ W + X )

Default permission  file create 644 
default Permission for directory 755 


Link file is noting both Shortcut 

Hard Link --- > What ever change happen in actual file and same will be changed in shortcut file change will happen 
            --- > in case if we delete file -- > still we can have shorcut file 
            ln <orginal - file name > < shortcut-file >

Soft Link : --- > What ever change happen in actual file and same will be changed in shortcut file change will happen 
            --> if we delete orginal file shortcut file become danggling not accessible 
            
            ln -s <orginal - file name > < shortcut-file >

-------------------------------------------------------------- 
Zip --- > file compress 

to create a zip file 
    zip newfile-name <file1,file2>
to see the content in the zip file 
    zip -sf <zip file name >
to append a file to zip 
    zip -r <zipfilename> < appendfile>
to remove a file from zip 
    zip -d <zip filename> < removed file name >
to encrypt 
   zip -e <filename> < files1,files 2>

--------------------------------------------------------------------------------------------------
TAR -- Tape Archive 

c --- > create 
v ---> verbose ( Show Progress )
f --> filename 
-x --- > Extract 
-r -==> append a file 
-s --> view 
to creat a file 
    tar -cvf < filename.tar>  <files/foplder >
Compress 
    tar -zcvf < filename.tar.gz>  <files/foplder >
to extract 
    tar -xvf < filename.tar>
    tar -zxvf < filename.tar>
to append a file to existing tar 
    tar -rvf <filename.tar> < append file >
to deleta a file from exisiting tar 
    tar --delete -f <filename.tar>  < removing file name>
to view the content of the file 
    tar -sf <filename.tar>

------------------------------------------------------------------------------------------------------
WC ----> word count 
-l ===> Count line 
-w ==> count words 
-c  ==> count bytes 
-m ===> count character 
-L  ===> Print length of longenst line 

---------------------------------------------------------------------------------------------------------
to create file witl dummy data 
yes " this is simple line"  | head -c 1000 > test.txt
# head -c 100M > test.txt
truncate -s 1000 tamil.txt
------------------------------------------------------ 

awk -- > text processing tool
awk 'BEGIN {print "Hello World"}'   

Sample data 

ID,Name,Department,Salary,Location
101,John Doe,Engineering,75000,New York
102,Jane Smith,Marketing,62000,Los Angeles
103,Emily Davis,Finance,68000,Chicago
104,Michael Brown,Engineering,80000,Boston
105,Linda Wilson,HR,55000,Seattle
106,Robert Johnson,Finance,70000,New York
107,Patricia Garcia,Marketing,64000,Austin
108,James Martinez,HR,57000,San Francisco
109,Barbara Lee,Engineering,77000,Seattle
110,William Anderson,Marketing,61000,Boston

awk -F, '{print $1, $2}' data.csv
awk -F, '{print $1, $2, $3}' data.csv | sort    

awk -F',' '/105/ {print $1, $4}' data

awk '/Name/ {print}' data
awk '/ID/ {print}' data
awk '{print $1, $4}' data
awk '{print NR, $0}' data
awk '{print NR "-" $1 }
awk -F ',' '{print NR "-",  $1 }' data

--------------------------------------------------------------------------------------- 
Cut -- > text processing tool
cut  -c 1-5 data
cut -d ',' -f 1,2 data

----------------------------------------------------------------------------------------

Process Management

PS -- > Process Status
ps aux -- > show all ruuuning process with details
ps -ef -- > show all running process with details
top- > show all running process with details in real time
htop -- > show all running process with details in real time with more details
kill <PID> -- > to kill a process
kill -9 <PID> -- > to force kill a process
nice <PID> -- > to change the priority of a process
renice <PID> -- > to change the priority of a process
jobs -- > to show all running jobs
pgrep <process name> -- > to search for a process
pkill <process name> -- > to kill a process by name
& -- > to run a process in background
fg <job number> -- > to bring a process to foreground
bg <job number> -- > to run a process in background
nohup <command> & -- > to run a command in background even after logout

-----------------------------------------------------------------------------------------
Systen Management   

systemctl -- > to manage system services
systemctl start <service name> -- > to start a service
systemctl stop <service name> -- > to stop a service
systemctl restart <service name> -- > to restart a service  
systemctl status <service name> -- > to check the status of a service
systemctl enable <service name> -- > to enable a service to start at boot

journalctl -- > to view system logs
journalctl -f -- > to follow system logs in real time   
journalctl -u <service name> -- > to view logs of a specific service
journalctl --since "2023-10-01" --until "2023-10-31" -- > to view logs between specific dates
journalctl -p err -- > to view error logs
journalctl -f -u httpd

-------------------------------------------------------------------------------------------

Hostname: 

sudo hostnamectl set-hostname new-hostname

--------------------------------------------------------------------------------------------------
Scripting -- Automation -- daily task / repetitive task

she-bang , sha-bang --- #! /bin/bash ----- > not mandatory but it is good practice to have this in the first line of the script 

---------------------------------------------------

#! /bin/bash

uptime 
free -m
df -h
du -sh /root 
uname -a
whoami  
cal 
date
hostname


--------------------------------------------------------------------

#! /bin/bash
echo "This is a simple script to display system information"
uptime 
free -m
df -h
du -sh /root 
uname -a
whoami  
cal 
date
hostname


--------------------------------------------------------------------

#! /bin/bash
echo " Please Enter your name"
read name
echo "Hello $name, Welcome to the Linux world"

--------------------------------------------------------------------
#! /bin/bash
read -p "Please enter your name: " fname
echo "Hello $fname, Welcome to the Linux world"

--------------------------------------------------------------------

Varibels ---- > to store data in the script in key-value pair

there is no data type in bash scripting

int var=10
string var="Hello World"
array var=(1 2 3 4 5)
float var=10.5  No data type in bash scripting

# user variable
name="Pramoth"
age=34
company="TechnoFist"

#! /bin/bash
read -p "Please enter your name: " fname
read -p "Please enter your age: " age
read -p "Please enter your company: " company

echo "My name is $fname"
echo "My age is $age"
echo "I work at $company"
--------------------------------------------------------------------
system variables | Environment variables 

$PATH
#SHELL
env -   
-------------------------------------------------

sudo yum install croine -y 
sudo systemctl enable crond
sudo systemctl start crond

sudo yum install rsyslog

sudo systemctl enable rsyslog
sudo systemctl start rsyslog
sudo vim /etc/rsyslog.conf

cat /etc/log/cron

sudo systemctl restart rsyslog

journalctl -u crond 

-------------------------------------------------------------
14-07-2025 -- Class running Notes .. 

Cron jobs ---> 
    # you have take file backup every data at 2 AM  

    You will write script to take backup of the file 
    every day login at 2 am and you will run the script (weekend ) 
    cron Jobs will at schedule and run the script at 2 am every day
Services -- > 
    nginx 
    docker 
    httpd
    mysql 
    jenkins
Cron job we can schedule to run at specific time and date every 5 minutes --- in case failure you will get email alert 
    */5 * * * * /path/to/backup_script.sh


cron expression format
    * * * * * /path/to/script.sh
    - - - - -
    | | | | |
    | | | | +---- Day of the week (0 - 7) (Sunday is both 0 and 7)
    | | | +------ Month (1 - 12)
    | | +-------- Day of the month (1 - 31)
    | +---------- Hour (0 - 23)
    +------------ Minute (0 - 59)

    eg : 
    0 5 * * 0 /path/to/script.sh --- bash script(it wont run) | Chmod +x /path/to/script.sh
    # This will run the script at 5 AM every Sunday

    ---------------------------------------------------------------